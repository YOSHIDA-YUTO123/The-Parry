//================================================
//
// トランスフォームを制御する処理 [transform.cpp]
// Author:YUTO YOSHIDA
//
//=================================================

//*************************************************
// インクルードファイル
//*************************************************
#include "transform.h"
#include"math.h"
#include"object.h"
#include"manager.h"

//=================================================
// コンストラクタ
//=================================================
CPosition::CPosition()
{
	m_pos = VEC3_NULL;
}

//=================================================
// デストラクタ
//=================================================
CPosition::~CPosition()
{
}

//=================================================
// コンストラクタ
//=================================================
CRotation::CRotation()
{
	m_rot = VEC3_NULL;
	m_Dest = VEC3_NULL;
}

//=================================================
// デストラクタ
//=================================================
CRotation::~CRotation()
{
}

//=================================================
// スムーズな向きの変更処理
//=================================================
void CRotation::SetSmoothAngle(const float coef)
{
	// 差分
	float Diff =  m_Dest.y - m_rot.y;

	NormalizeDiffRot(Diff, &m_rot.y);

	m_rot.y = LerpDest(m_Dest.y, m_rot.y, coef);
}

//=================================================
// コンストラクタ
//=================================================
CVelocity::CVelocity()
{
	m_move = VEC3_NULL;
}

//=================================================
// デストラクタ
//=================================================
CVelocity::~CVelocity()
{
}

//=================================================
// コンストラクタ
//=================================================
CSizeCircle::CSizeCircle()
{
	m_fRadius = NULL;
}

//=================================================
// デストラクタ
//=================================================
CSizeCircle::~CSizeCircle()
{
}

//=================================================
// 位置の更新処理
//=================================================
void CPosition::UpdatePosition(const D3DXVECTOR3 move)
{
	// スローモーションの取得
	CSlow* pSlow = CManager::GetSlow();

	// スローモーションのレベル
	float fSlowLevel = pSlow->GetLevel(false);

	m_pos += move * fSlowLevel;
}

//=================================================
// 移動量の減衰処理3D
//=================================================
void CVelocity::SetInertia3D(const float fcoef)
{
	// 0.0fに近づける
	m_move.x = LerpDest(0.0f, m_move.x, fcoef);
	m_move.z = LerpDest(0.0f, m_move.z, fcoef);
}

//=================================================
// 移動量の減衰処理2D
//=================================================
void CVelocity::SetInertia2D(const float fcoef)
{
	// 0.0fに近づける
	m_move.x = LerpDest(0.0f, m_move.x, fcoef);
	m_move.y = LerpDest(0.0f, m_move.y, fcoef);
}

//=================================================
// 重力の設定
//=================================================
void CVelocity::Gravity(const float gravity)
{
	// スローモーションの取得
	CSlow* pSlow = CManager::GetSlow();

	// スローモーションのレベル
	float fSlowLevel = pSlow->GetLevel(false);

	m_move.y += gravity * fSlowLevel;
}

//=================================================
// バウンドの設定
//=================================================
void CVelocity::Bound(D3DXVECTOR3 nor, float coef)
{
	// 範囲内にクランプする
	coef = Clamp(coef, 0.0f, 1.0f);

	float dot = D3DXVec3Dot(&m_move, &nor);

	D3DXVECTOR3 NewMove = m_move - (dot * 2.0f) * nor;

	m_move = NewMove * coef;
}

//=================================================
// ジャンプ処理
//=================================================
void CVelocity::Jump(const float jumpHeight)
{
	m_move.y = jumpHeight;
}

//=================================================
// 大きさ2Dのコンストラクタ
//=================================================
CSize2D::CSize2D()
{
	m_fWidth = NULL;
	m_fHeight = NULL;
}

//=================================================
// 大きさ2Dのデストラクタ
//=================================================
CSize2D::~CSize2D()
{
}

//=================================================
// コンストラクタ
//=================================================
CSize3D::CSize3D()
{
	GetVector = VEC3_NULL;
}

//=================================================
// デストラクタ
//=================================================
CSize3D::~CSize3D()
{
}
